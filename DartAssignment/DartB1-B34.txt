(1). What is inheritance? 
Ans:-Inheritance is defined as a mechanism where the sub or child class inherits the properties and characteristics of the super class or other derived classes.
 It also supports additional features of extracting properties from the child class and using it into other derived classes.

(2).Which inheritance is not supported by Dart? Why? 
Ans:- Unfortunately, Dart doesn't support multiple inheritance, which means a class cannot extend more than one class.

(3).What is advantage of inheritance? 
Ans:-The base class code will be already tested and debugged. As the existing code is reused, it leads to less development and maintenance costs. 
Inheritance makes the sub classes follow a standard interface. 
Inheritance helps to reduce code redundancy and supports code extensibility

(4). Difference between inheritance and encapsulation.
Ans:-Inheritance and encapsulation are two fundamental concepts in oops.

Inheritance:-Inheritance is a mechanism that allows a new class to be based on an existing class, inheriting its properties and methods.
 The new class, called a subclass or derived class, can add new properties and methods or override the inherited ones.
 Inheritance helps to reuse code and avoid code duplication. It also enables the creation of a hierarchy of classes with increasing levels of specialization.

Encapsulation:-Encapsulation is a mechanism that hides the implementation details of an object from the outside world, exposing only a public interface for interacting with it. 
The internal state and behavior of an object are protected from direct access and modification, and can only be accessed through well-defined methods. 
Encapsulation provides better control over the complexity and security of an application, and facilitates code maintenance and evolution.

(5).Difference between inheritance and abstraction. 
Ans:- inheritance is a mechanism for creating a hierarchy of classes with increasing levels of specialization,
while abstraction is a mechanism for hiding the implementation details of a class and exposing only the essential features or interface. 
Both concepts are important in object-oriented programming and are used to create more modular, reusable, and maintainable code.

(6).Difference between inheritance and polymorphism. 
Ans:-  inheritance is a mechanism for creating a hierarchy of classes with increasing levels of specialization,
while polymorphism is a concept where an object can take on multiple forms, achieved through method overriding and method overloading.
Both concepts are important in object-oriented programming and are used to create more modular, reusable, and maintainable code

(7). Can we override static method in Dart ?
Ans:- We can't override static methods. The two static methods you declared there are in fact two different static methods, not the same, overriden one.

(8). Can we overload static method in Dart?
Ans:-You can't override static methods. The two static methods you declared there are in fact two different static methods, not the same, overriden one. 
Answer for a different question, but related: Dart doesn't inherit static methods to derived classes

(9). Can a class implement more than one interface? 
Ans:-Your class can implement more than one interface, so the implements keyword is followed by a comma-separated list of the interfaces implemented by the class.

(10).Can an interface extend more than one interface in Dart?
Ans:-Interfaces. In contrast to other programming languages, Dart doesn't have an interface keyword and you have to use classes to create interfaces.
Any class is allowed to implement one or more interfaces. 

(11).Can an interface extend more than one interface in Dart?
Ans:Interfaces. In contrast to other programming languages, Dart doesn't have an interface keyword and you have to use classes to create interfaces.
Any class is allowed to implement one or more interfaces

(12). What will happen if a class implements two interfaces and they both have a method with same name and signature?
Ans:- If two interfaces contain a method with the same signature but different return types, then it is impossible to implement both the interface simultaneously. 
According to JLS (ยง8.4. 2) methods with same signature is not allowed in this case

(13).Can we pass an object of a subclass to a method expecting an object of the super class?
Ans:-Yes, you can pass that because subclass and superclass are related to each other by Inheritance which provides IS-A property.

(14).Are static members inherited to sub classes?
Ans:-Static classes are sealed and therefore cannot be inherited. They cannot inherit from any class or interface except Object. 
Static classes cannot contain an instance constructor.

(15).What happens if the parent and the child class have a field with same identifier?
Ans:-= In Dart, if both the parent and the child class have a field with the same identifier (i.e., variable name), 
the child class's field will override the parent class's field. This means that when an object of the child class is instantiated, 
accessing the field with that identifier will always refer to the child class's field.

(16).Are constructors and initializers also inherited to sub classes? 
Ans:- Constructors are inherited by subclasses in most programming languages, including Dart. When a subclass is created, 
it will automatically have all of the constructors from its superclass,
unless the superclass has defined its constructors as private.
However, in Dart, initializers are not inherited by subclasses. 
Initializers are executed before the constructor body and are used to set the values of final and non-nullable instance variables. 
When you create a subclass, you will need to define your own initializers to initialize any variables in the subclass.


(17).How do you restrict a member of a class from inheriting by its sub classes? 
Ans:-In most object-oriented programming languages, you can restrict a member of a class from being inherited by its subclasses by marking it as final or private.

(18).How do you implement multiple inheritance in Dart?
Ans:-Dart does not support multiple inheritance directly, but it provides a way to achieve similar functionality through mixins.
A mixin is a way to reuse a class's code in multiple class hierarchies. 
It is a class-like construct that can only be used in conjunction with another class or classes to add additional functionality. 
To use a mixin, you create a new class that extends another class and includes the mixin using the with keyword.

(19). Can a class extend by itself in Dart?
 Ans:-No, a class cannot extend itself in Dart. This is because it would create an infinite loop in the class hierarchy, 
which would cause the program to crash due to a stack overflow error.

(20).How do you override a private method in Dart? 
Ans:-In Dart, private methods and variables are denoted by a leading underscore (_) before their names. 
Private methods are not inherited by subclasses, so they cannot be overridden directly.

(21).When to overload a method in Dart and when to override it? 
Ans:-In Dart, private methods and variables are denoted by a leading underscore (_) before their names. 
Private methods are not inherited by subclasses, so they cannot be overridden directly.However, 
if you define a public method in the subclass with the same name as the private method in the superclass, 
you can call the private method from within the public method using the super keyword. This is called method forwarding or method cascading.

(22).What is the order of extends and implements keyword on Dart class declaration?
Ans:-In Dart, the order of the extends and implements keywords on a class declaration is as follows: 
First, you use the extends keyword to specify the superclass that your class is extending. 
This allows your class to inherit all the properties and methods of the superclass.
After the extends keyword, you use the implements keyword to specify one or more interfaces that your class is implementing.
An interface defines a set of methods and properties that a class must implement in order to be considered as implementing that interface.
If your class is implementing multiple interfaces, you can separate them with commas.
It's important to note that the order of the extends and implements keywords is fixed in Dart. 
You cannot swap the order of these keywords or leave one of them out. If you try to do so, the Dart compiler will produce a syntax error. 


(23). How do you prevent overriding a Dart method without using the final modifier? 
Ans:-In Dart, one way to prevent a method from being overridden is by marking the method as static. 
A static method belongs to the class rather than to individual instances of the class, so it cannot be overridden by subclasses.

(24).What are the rules of method overriding in Dart?
Ans:-The method in the subclass must have the same name, return type, and parameters as the method in the superclass. The only difference is in the implementation.

The visibility of the method in the subclass cannot be more restrictive than the visibility of the method in the superclass. For example, 
if a method is declared as public in the superclass, it cannot be declared as private in the subclass.

The @override annotation should be used before the method in the subclass to indicate that it is intended to override a method in the superclass. 
This is not strictly required by the Dart language, but it is considered good practice and will produce a warning if the method does not actually override a superclass method.

If the superclass method is marked as final, it cannot be overridden in the subclass.

The covariant keyword can be used to allow the parameter types to be more specific in the subclass. For example, 
if a method in the superclass takes a parameter of type Object, the subclass can override it with a parameter of type String using the covariant keyword.

(25).Difference between method overriding and overloading in Dart.  
Method Overloading:-
Method overloading is a technique where a class can have multiple methods with the same name but different parameters. 
The parameters can be of different types or a different number of parameters. But Dart doesn't support Method Overloading.
Method overloading is used to provide multiple ways of calling a method with different input parameters.

Method Overriding:-
Method overriding is a technique where a subclass provides its own implementation of a method that is already defined in its superclass. 
Method overriding is used to provide a specialized implementation of a method in a subclass, 
which may differ from the implementation in the superclass.

(26).What happens when a class implements two interfaces and both declare field (variable) with
same name
Ans:-When a class in Dart implements two interfaces and both interfaces declare a field (variable) with the same name, 
the Dart compiler will generate an error because of the naming conflict. This is because interfaces in Dart do not provide implementation details, 
but only define a contract that a class must implement. If two interfaces declare a field with the same name,
 the compiler cannot determine which implementation to use in the implementing class.
To resolve this issue, the class implementing the interfaces should provide its own implementation of the field with a unique name, 
or choose to implement only one of the interfaces if the fields with the same name are essential to both. 
Another option is to define a superclass or mixin that defines the conflicting fields and then have the class in question extend or mix in that class instead.
For example, suppose we have two interfaces InterfaceA and InterfaceB that declare a field named field1 as follows

(27).Can a subclass instance method override a superclass static method? 
Ans:-No, a subclass instance method cannot override a superclass static method in Dart.
Static methods are not inherited in the same way that instance methods are. When you declare a static method in a superclass,
it is not part of the contract that the subclass must implement,
and therefore it cannot be overridden by an instance method in the subclass.
In fact, attempting to override a static method with an instance method will result in a compilation error. 
This is because static methods are associated with the class itself, while instance methods are associated with individual instances of the class. 
They operate on different levels and cannot be interchanged.

(28).Can a subclass static method hide superclass instance method?
Ans:-Yes, a subclass static method can hide superclass instance method in Java. 
If a subclass defines a static method with the same signature as a static method in the superclass, 
then the method in the subclass hides the one in the superclass
1. This mechanism is known as method hiding1. 
2.It happens because static methods are resolved at compile time

(29).Can a superclass access subclass member? 
Ans:-No, a superclass has no knowledge of its subclasses. However, a subclass has access to all non-private members of its superclass.
 When you declare a variable as having the type of the superclass, you can only access (public) methods and member variables of the superclass through that variable.
 To access the methods in the concrete class, you need to either declare the variable as the derived class or cast it to that class

(30).Difference between object oriented and object based language.
Ans:-Object-oriented programming languages support all the features of OOPs and do not have an in-built object.
 Examples of object-oriented languages include C++, C#, Java, etc1.
 Object-based programming languages do not support all the features of OOPs like Polymorphism and Inheritance.
 Object-based languages have an in-built object like JavaScript has a window object. 

(31).Explain Diamond problem.
Ans:-The diamond problem is a common problem in Java when it comes to inheritance. 
Inheritance is a very popular property in an object-oriented programming language, such as C++, Java, etc. 
The diamond problem occurs when a class extends two classes that have the same method name and signature.
 Due to this, the compiler gets confused about which method to call1. To solve this problem, Java introduced the concept of default methods.
 Default methods are methods that have a body but can be overridden by implementing classes. This leads to a problem known as the โdiamond problemโ

(32). Why Dart does not support operator overloading?
Ans:-Dart does not support operator overloading for several reasons:
Simplicity: Dart is designed to be a simple and easy-to-learn language, and allowing operator overloading can make the language more complex and harder to use for new developers.
Readability: Overloaded operators can lead to code that is hard to read and understand, especially if the operator has different meanings depending on the operands. 
This can make code harder to maintain and debug.
Compatibility: Operator overloading can make code less compatible with other programming languages,
as different languages have different rules for operator overloading. By not supporting operator overloading,
 Dart ensures that its code is more portable and easier to share with other developers.
Instead of operator overloading, Dart provides a rich set of built-in operators and methods for common operations,
 such as arithmetic, comparison, and string manipulation. 
Developers can also define their own methods with descriptive names to perform custom operations, improving the readability and maintainability of their code.

(33).What is Encapsulation in Dart?
Ans:-Encapsulation in Dart means hiding data within a library, preventing it from outside factors. 
It helps you control your program and prevent it from becoming too complicated.
 In Dart, encapsulation means making fields private and using public getter and setter methods to access and set the value of that field.
 You can achieve encapsulation in Dart by using the _ (underscore), followed by the identifier. 
The _ (underscore) symbol is used to make the libraryโs content completely private.
I hope that helps! Let me know if you have any other questions.

(34). Which of the Dart OOPS feature promotes access protection or data hiding?
Ans:-Encapsulation is the Dart OOPS feature that promotes access protection or data hiding.
 It helps you control your program and prevent it from becoming too complicated.
 In Dart, encapsulation means making fields private and using public getter and setter methods to access and set the value of that field.
 You can achieve encapsulation in Dart by using the _ (underscore), followed by the identifier.
 The _ (underscore) symbol is used to make the libraryโs content completely private.


.












